continue
res
text_message
continue
text_message
request
res
continue
res.body.message
res.body["messageId"]
res.body
res["messageId"]
res 
continue
to_mid["0"]
continue
to_mid
continue
from_mid
continue
from_mid
continue
res.status
continue
from_mid
continue
from_mid
continue
@proxy
@channel_mid
@channel_secret
@channel_id
continue
is_validate_signature
continue
http_headers [ "X-LINE-CHANNELSIGNATURE"]
http_headers = request.env.select {| k, v | k.start_with? ( 'HTTP_')}
request.env.select {| k, v | k.start_with? ( 'HTTP_')}
request.env.select {| k, v | k.start_with ( 'HTTP_')}
request.env.count
request.env
request
request.env.select {| k, v | k.start_with ( 'HTTP_')}
request.env.select {| k, v |? k.start_with ( 'HTTP_')}
continue
params[:result]["0"]
continue
params[:result]["0"]
params[:result][0]
params[:result]
params["result"]
params
continue
is_validate_signature
is_valid_signature
continue
is_validate_signature
is_valid_signature
continue
signature_answer
signature
continue
signature_answer
next
mext
next
signature
continue
request.headers
request
continue
request.headers
signature
continue
signature_answer
next
request.headers["X-LINE-ChannelSignature"]
signature
continue
signature
continue
signature_answer
next
hash
next
http_request_body
hash
next
request.headers["X-LINE-ChannelSignature"]
request
signature
continue
is_validate_signature
continue
Faraday.default_adapter
res
continue
data
request.body
request.headers
request.header
request
continue
client
res
continue
message
line_ids
exit
params[:result][0]
exit
params[:result]["0"]
params[:result][:0]
params[:result][0]
params[:result]
params
exit
CHANNEL_SECRET
exit
Settings
CHANNEL_SECRET
exit
CHANNEL_SECRET
OpenSSL::Digest::SHA256.new
